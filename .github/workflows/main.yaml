name: CI/CD Pipeline with Security & Compliance

# Set the permissions for the workflow
permissions:
  security-events: write  # Grant permission for security event uploads

on:
  push:
    branches:
      - main  # Trigger pipeline when code is pushed to the 'main' branch

jobs:
  build_and_scan:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the job

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Node.js (npm)
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'  # Use Node.js version 14 or your desired version

    # Step 3: Install npm dependencies
    - name: Install dependencies
      run: npm install  # Ensure dependencies are installed

    # Step 4: Install SonarQube Scanner
    - name: Install SonarQube Scanner
      run: |
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner.zip -d /opt
        echo "/opt/sonar-scanner-4.6.2.2472-linux/bin" >> $GITHUB_PATH  # Add sonar-scanner to PATH

    # Step 5: Run SonarQube analysis
    - name: Run SonarQube Scan
      run: |
        sonar-scanner \
          -Dsonar.projectKey=Webserver \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.sources=.

    # Step 6: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t myapp:latest .  # Tagging with 'latest'
        docker tag myapp:latest rtx3osie/myapp:latest  # Push image with 'latest' tag
        docker push rtx3osie/myapp:latest  # Push image to Docker Hub

    # Step 7: Run Trivy Docker image scan
    - name: Run Trivy Docker scan
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: 'rtx3osie/myapp:latest'  # Image to be scanned
        format: 'sarif'  # SARIF format for scan results
        output: 'trivy-results.sarif'  # Output file for the SARIF results

    # Step 8: Upload Trivy SARIF Report (Using CodeQL Action v3)
    - name: Upload Trivy SARIF Report
      uses: github/codeql-action/upload-sarif@v3  # Updated to v3
      with:
        sarif_file: 'trivy-results.sarif'

    # Step 9: Replace image tag in Deployment YAML with 'latest'
    - name: Replace image tag in Deployment YAML
      run: |
        sed -i "s|rtx3osie/myapp:PLACEHOLDER|rtx3osie/myapp:latest|" ./kube/deployment.yaml
        cat ./kube/deployment.yaml  # Debug: Print the YAML file to check image tag replacement

