name: CI/CD Pipeline with Security & Compliance

on:
  push:
    branches:
      - main  # Trigger pipeline when code is pushed to the 'main' branch

jobs:
  build_and_scan:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the job

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (to build multi-platform images)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Step 3: Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Store DockerHub username in GitHub Secrets
        password: ${{ secrets.DOCKER_PASSWORD }}  # Store DockerHub password in GitHub Secrets

    # Step 4: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t myapp:latest .  # Tagging with 'latest'
        docker tag myapp:latest rtx3osie/myapp:latest  # Push image with 'latest' tag
        docker push rtx3osie/myapp:latest  # Push image to Docker Hub

    # Step 5: Run Trivy Docker image scan
    - name: Run Trivy Docker scan
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: 'rtx3osie/myapp:latest'  # Image to be scanned
        format: 'sarif'  # SARIF format for scan results
        output: 'trivy-results.sarif'  # Output file for the SARIF results

    # Step 6: Upload Trivy SARIF Report
    - name: Upload Trivy SARIF Report
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    # Step 7: Replace image tag in Deployment YAML with 'latest'
    - name: Replace image tag in Deployment YAML
      run: |
        sed -i "s|rtx3osie/myapp:PLACEHOLDER|rtx3osie/myapp:latest|" ./kube/deployment.yaml
        cat ./kube/deployment.yaml  # Debug: Print the YAML file to check image tag replacement



    # Step 9: Deploy to Kubernetes (if applicable, assume kubectl is set up)
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f ./kube/deployment.yaml
        echo "Kubernetes deployment applied successfully."
